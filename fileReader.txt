class HTPAdGUI_FileReader():

    def __init__(self, width, height):

        self.width = width
        self.height = height

        # Depending on the sensor size, the content of the bds-file is
        # organized as follows
        self.tparray = TPArray(width=width,
                               height=height)
        # data_order = ArrayType.get_serial_data_order()

    def read_htpa_video(self, path):

        # Check if path is provided as pathlib
        if not isinstance(path, Path):
            path = Path(path)

        # get suffix
        suffix = path.suffix

        if suffix.casefold() == ('.txt').casefold():
            df_video, header = self._import_txt(path)
        elif suffix.casefold() == ('.bds').casefold():
            df_video, header = self._import_bds(path)
        else:
            print('File extension not recognized.')
            return None

        return df_video, header

    def _import_txt(self, path, **kwargs):

        # Read the very first line, which contains the header
        with open(path) as file:
            header = file.readline()

        # Use pandas' read_csv() method to read in the rest of the file
        sep = kwargs.pop('sep', ' ')
        skiprows = kwargs.pop('skiprows', 1)

        # Get columns names
        columns = self.tparray.get_serial_data_order()

        # Read txt with pandas to DataFrame
        txt_content = pd.read_csv(path,
                                  sep=sep,
                                  skiprows=skiprows,
                                  header=None)

        # txt file contains a time stamp at the end, that's not in the bds-file
        # use only the first columns that contain actual data
        txt_content = txt_content[np.arange(0, len(columns), 1)]

        # rename columns appropriately
        txt_content.columns = columns

        # rename index appropriately
        txt_content.index = range(0, len(txt_content))
        txt_content.index.name = 'image_id'

        return txt_content, header

    def _import_bds(self, bds_path, **kwargs):

        # open file and save content byte by byte in list
        bds_content = []

        with open(bds_path, "rb") as f:

            # Read the header byte by byte until '\n'
            header = []
            header_end = False

            while header_end == False:
                header.append(f.read(1))

                if header[-1].decode() == '\n':
                    header_end = True

            # Join bytes of header together
            header = bytes().join(header)

            # Read two bytes at a time
            while (LSb := f.read(2)):
                # and combine in LSb fashion
                bds_content.append(int.from_bytes(LSb,
                                                  byteorder='little'))

        # Cast the data to a DataFrame of appropriate size
        columns = self.tparray.get_serial_data_order()

        # If the last frame has not been fully transmitted, reshaping fails
        # Therefore throw out the last incomplete frame
        num_full_frames = int(len(bds_content) / len(columns))
        bds_content = bds_content[0:num_full_frames * len(columns)]
        bds_content = (np.array(bds_content)).reshape(-1, len(columns))
        bds_content = pd.DataFrame(data=bds_content,
                                   columns=columns)

        bds_content.index = range(len(bds_content))
        bds_content.index.name = 'image_id'

        return bds_content, header

    def reverse(self, df_video):
        """
        Function for rotating a video by 180°. Intended for postprocessing
        a video sequence from a sensor that was mounted upside-down

        Parameters
        ----------
        df_video : pd.DataFrame
            DataFrame containing the content of a text or bds file exported
            from the HTPAdGUI

        Returns
        -------
        df_video: pd.DataFrame
            Upside-down version of the original video.

        """

        # Rotation must be applied to the pixel values and the electrical offsets
        pix_cols = self.tparray._pix
        e_off_cols = self.tparray._e_off

        NROFBLOCKS = self.tparray._DevConst['NROFBLOCKS']
        width = self.tparray._width
        height = self.tparray._height

        # go through the DataFrame image by image
        for i in df_video.index:
            # get pixel and electrical offsets values
            pix_val = df_video.loc[i, pix_cols]
            e_off_val = df_video.loc[i, e_off_cols]

            # reshape values according to sensor
            pix_val = pix_val.values.reshape(self.tparray._npsize)
            e_off_val = e_off_val.values.reshape((int(height / NROFBLOCKS),
                                                  width))

            # rotate both arrays by 180°
            pix_val = np.rot90(pix_val, k=2)
            e_off_val = np.rot90(e_off_val, k=2)

            # reshape to a row vector and write to dataframe
            df_video.loc[i, pix_cols] = pix_val.flatten()
            df_video.loc[i, e_off_cols] = e_off_val.flatten()

        # Return the rotated dataframe
        return df_video

    def export_bds(self, df_video, header, bds_path, **kwargs):
        """
        Export a video sequence in dataframe format to a .bds file that is
        compatible with HTPAdGUI


        Parameters
        ----------
        df_video : pd.DataFrame
            DESCRIPTION.
        header : byte
            DESCRIPTION.
        path : pathlib.Path
            DESCRIPTION.

        Returns
        -------
        None.

        """

        mode = kwargs.pop('mode', 'x')

        # Check if file already exists
        if bds_path.exists():
            if mode == 'x':
                print('File exists. No data will be written. Pass mode="x" to overwrite.')
            elif mode == 'w':
                print('File exists and will be overwritten.')
                os.remove(bds_path)

        # first write the header to the list byte by byte
        bds_content = []
        bds_content.append(header)
        # Go over the video sequence image by image, convert all integers to
        # bytes and append to the list

        for i in df_video.index:

            # get the whole row as a row vector
            row = df_video.loc[i].values

            # cast every integer to a byte in little endian byteorder
            for val in row:
                bds_content.append(int(val).to_bytes(length=2, byteorder='little'))

        # Write bytes to file
        with open(bds_path, "wb") as bds_file:
            [bds_file.write(b) for b in bds_content]

        return None

    def export_txt(self, df_video, header, txt_path, **kwargs):
        """
        Export a video sequence in dataframe format to a .txt file that is
        compatible with HTPAdGUI


        Parameters
        ----------
        df_video : pd.DataFrame
            DESCRIPTION.
        header : byte
            DESCRIPTION.
        txt_path : pathlib.Path
            DESCRIPTION.

        Returns
        -------
        None.

        """

        mode = kwargs.pop('mode', 'x')

        # Check if file already exists
        if txt_path.exists():
            if mode == 'x':
                print('File exists. No data will be written. Pass mode="x" to overwrite.')
            elif mode == 'w':
                print('File exists and will be overwritten.')
                os.remove(txt_path)
        else:
            # if it doesn't, create it
            with open(txt_path, 'w') as file:
                pass

        # first write the header to the file
        with open(txt_path, 'w') as file:
            header = file.writelines([header])

        # Then use pandas' to_csv() method to write the rest of the data to the
        # file
        df_video.to_csv(txt_path, sep=' ', mode='a',
                        header=False, index=False)

        return None

    def export_png(self, df_video, path):
        """
        A function for writing a video sequence given as a DataFrame to .png
        frame by frame in a sepcified folder (path)


        Parameters
        ----------
        df_video : pd.DataFrame
            DESCRIPTION.

        Returns
        -------
        None.

        """

        # Get shape of sensor array
        npsize = self.tparray._npsize

        # Get columns with pixel values
        pix_cols = self.tparray._pix

        # Get rid of everything else
        df_video = df_video[pix_cols]

        if not path.exists():
            path.mkdir(parents=True, exist_ok=False)

        for i in df_video.index:
            img = df_video.loc[[i]].values.reshape(npsize)

            file_name = str(i) + '.png'

            img = self._scale_img(img)

            matplotlib.image.imsave(path / file_name, img)

        return None

    def export_mp4(self, df_video: pd.DataFrame, mp4_path: Path, **kwargs):
        """
        A function for writing a video sequence given as a DataFrame to .mp4
        in a sepcified folder (path)


        Parameters
        ----------
        df_video : pd.DataFrame
            DESCRIPTION.

        Returns
        -------
        None.

        """

        # Framerate
        fps = kwargs.pop('fps', 8)

        # First, write the whole sequence as .png in a temporary folder
        png_folder = mp4_path.parents[0] / 'png_temp'

        self.export_png(df_video, png_folder)

        # Make a video from the .png files using subprocess with ffmpeg
        os.chdir(png_folder)
        subprocess.call([
            'ffmpeg', '-framerate', str(fps), '-i', '%d.png', '-r', str(fps),
            '-crf', '18', '-pix_fmt', 'yuv420p',
            mp4_path.as_posix()
        ])

        # Remove temporary folder
        shutil.rmtree(png_folder)

        return None

    def _scale_img(self, img):

        # Get width an height of image
        w = self.tparray._width
        h = self.tparray._height

        # Crop image by 10 % circumferential
        crop_w = int(np.ceil(0.1 * w))
        crop_h = int(np.ceil(0.1 * h))

        # Crop the image by 3 pixels to get rid of corners.
        img_crop = img[crop_h:h - crop_h, crop_w:w - crop_w]

        # Use the pixel values in the cropped frame to scale the image
        dK_max = img_crop.max()
        dK_min = img_crop.min()

        img = (img - dK_min) / (dK_max - dK_min)

        img[img <= 0] = 0

        return img

    def _flip(self, df_video):

        w = self.width
        h = self.height

        pix_cols = self.tparray._pix

        for i in df_video.index:
            img = df_video.loc[i, pix_cols].values.reshape((h, w))
            img = np.flip(img, axis=1).flatten()
            df_video.loc[i, pix_cols] = img

        return df_video

